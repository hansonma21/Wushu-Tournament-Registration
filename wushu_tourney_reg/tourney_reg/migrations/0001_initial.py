# Generated by Django 5.0.4 on 2024-05-11 01:52

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AgeGroup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('min_age', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
                ('max_age', models.IntegerField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['min_age', 'max_age'],
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('english_name', models.TextField()),
                ('chinese_name', models.TextField()),
                ('description', models.TextField(blank=True, null=True)),
                ('judging_criteria', models.TextField(blank=True, null=True)),
                ('rules', models.TextField(blank=True, null=True)),
                ('skill_level', models.TextField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')])),
                ('sex', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=20)),
                ('type_of_form', models.TextField()),
                ('is_group_event', models.BooleanField()),
                ('is_weapon_event', models.BooleanField()),
                ('is_taolu_event', models.BooleanField()),
                ('is_nandu_event', models.BooleanField()),
            ],
            options={
                'ordering': ['english_name', 'sex', 'skill_level'],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/')),
                ('first_name', models.TextField()),
                ('middle_name', models.TextField(blank=True, null=True)),
                ('last_name', models.TextField()),
                ('birth_date', models.DateField()),
                ('sex', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=20)),
                ('skill_level', models.TextField(choices=[('beginner', 'Beginner'), ('intermediate', 'Intermediate'), ('advanced', 'Advanced')], null=True)),
                ('email', models.EmailField(max_length=254)),
                ('phone_number', models.TextField(blank=True, null=True)),
                ('school_or_club', models.TextField(blank=True, null=True)),
                ('usawkf_id', models.TextField(blank=True, null=True, unique=True)),
                ('is_judge', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
            },
        ),
        migrations.CreateModel(
            name='Registrant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_group', models.BooleanField()),
                ('group_name', models.TextField(blank=True, null=True)),
                ('school_or_club', models.TextField(blank=True, null=True)),
                ('is_kungfu_team_competitor', models.BooleanField()),
            ],
            options={
                'ordering': ['tournament', 'group_name', 'users__first_name', 'users__last_name'],
            },
        ),
        migrations.CreateModel(
            name='Registration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, null=True)),
                ('registered_date_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_paid', models.BooleanField()),
                ('is_withdrawn', models.BooleanField(default=False)),
                ('is_checked_in', models.BooleanField(default=False)),
                ('is_disqualified', models.BooleanField(default=False)),
                ('is_completed', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['tournament_event', 'registrant'],
            },
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField()),
                ('start_date_time', models.DateTimeField()),
                ('end_date_time', models.DateTimeField()),
                ('location', models.TextField()),
                ('registration_open', models.BooleanField()),
                ('registration_start_date_time', models.DateTimeField()),
                ('early_registration_end_date_time', models.DateTimeField(blank=True, null=True)),
                ('registration_end_date_time', models.DateTimeField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_locked', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['start_date_time'],
            },
        ),
        migrations.CreateModel(
            name='TournamentEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('mat_or_location', models.TextField()),
                ('max_participants', models.IntegerField(default=999, validators=[django.core.validators.MinValueValidator(1)])),
                ('registration_open', models.BooleanField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_locked', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['tournament', 'event', 'order'],
            },
        ),
        migrations.AddConstraint(
            model_name='agegroup',
            constraint=models.UniqueConstraint(fields=('min_age', 'max_age'), name='unique_age_group', violation_error_message='This age group already exists.'),
        ),
        migrations.AddConstraint(
            model_name='agegroup',
            constraint=models.CheckConstraint(check=models.Q(('min_age__lte', models.F('max_age'))), name='min_age_before_max_age', violation_error_message='The minimum age must be the same as or before the maximum age.'),
        ),
        migrations.AddConstraint(
            model_name='agegroup',
            constraint=models.CheckConstraint(check=models.Q(('min_age__gte', 0)), name='min_age_non_negative', violation_error_message='The minimum age must be non-negative.'),
        ),
        migrations.AddField(
            model_name='event',
            name='age_group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tourney_reg.agegroup'),
        ),
        migrations.AddField(
            model_name='profile',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='registrant',
            name='users',
            field=models.ManyToManyField(to='tourney_reg.profile'),
        ),
        migrations.AddField(
            model_name='registration',
            name='registrant',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tourney_reg.registrant'),
        ),
        migrations.AddConstraint(
            model_name='tournament',
            constraint=models.UniqueConstraint(fields=('name', 'start_date_time', 'location'), name='unique_tournament', violation_error_message='This tournament already exists.'),
        ),
        migrations.AddConstraint(
            model_name='tournament',
            constraint=models.CheckConstraint(check=models.Q(('start_date_time__lte', models.F('end_date_time'))), name='start_date_before_end_date', violation_error_message='The start date must be the same day as or before the end date.'),
        ),
        migrations.AddConstraint(
            model_name='tournament',
            constraint=models.CheckConstraint(check=models.Q(('registration_start_date_time__lte', models.F('registration_end_date_time'))), name='registration_start_date_time_before_registration_end_date_time', violation_error_message='The registration start date time must be before the registration end date time.'),
        ),
        migrations.AddConstraint(
            model_name='tournament',
            constraint=models.CheckConstraint(check=models.Q(('early_registration_end_date_time__isnull', True), ('registration_start_date_time__lte', models.F('early_registration_end_date_time')), _connector='OR'), name='registration_start_date_time_before_early_registration_end_date_time_or_null', violation_error_message='The registration start date time must be before the early registration end date time or the early registration end date time must be null'),
        ),
        migrations.AddConstraint(
            model_name='tournament',
            constraint=models.CheckConstraint(check=models.Q(('early_registration_end_date_time__isnull', True), ('early_registration_end_date_time__lte', models.F('registration_end_date_time')), _connector='OR'), name='early_registration_end_date_time_before_registration_end_date_time_or_null', violation_error_message='The early registration end date time must be before the registration end date time or null.'),
        ),
        migrations.AddField(
            model_name='registrant',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tourney_reg.tournament'),
        ),
        migrations.AddField(
            model_name='tournamentevent',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tourney_reg.event'),
        ),
        migrations.AddField(
            model_name='tournamentevent',
            name='judges',
            field=models.ManyToManyField(blank=True, limit_choices_to={'is_judge': True}, to='tourney_reg.profile'),
        ),
        migrations.AddField(
            model_name='tournamentevent',
            name='tournament',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tourney_reg.tournament'),
        ),
        migrations.AddField(
            model_name='registration',
            name='tournament_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tourney_reg.tournamentevent'),
        ),
        migrations.AddConstraint(
            model_name='event',
            constraint=models.UniqueConstraint(fields=('english_name', 'chinese_name', 'skill_level', 'age_group', 'sex'), name='unique_event', violation_error_message='This event already exists.'),
        ),
        migrations.AddConstraint(
            model_name='profile',
            constraint=models.UniqueConstraint(fields=('email',), name='unique_email', violation_error_message='This email is already in use.'),
        ),
        migrations.AddConstraint(
            model_name='registrant',
            constraint=models.UniqueConstraint(fields=('tournament', 'group_name'), name='unique_group_name', violation_error_message='This group name already exists.'),
        ),
        migrations.AddConstraint(
            model_name='registrant',
            constraint=models.CheckConstraint(check=models.Q(('group_name__isnull', False), ('is_group', False), _connector='OR'), name='group_name_not_null_if_group', violation_error_message='The group name must not be null if it is a group.'),
        ),
        migrations.AddConstraint(
            model_name='registrant',
            constraint=models.CheckConstraint(check=models.Q(('group_name__isnull', True), ('is_group', True), _connector='OR'), name='group_name_null_if_not_group', violation_error_message='The group name must be null if it is not a group.'),
        ),
        migrations.AddConstraint(
            model_name='tournamentevent',
            constraint=models.CheckConstraint(check=models.Q(('order__gte', 1)), name='order_non_negative', violation_error_message='The order must be non-negative.'),
        ),
        migrations.AddConstraint(
            model_name='tournamentevent',
            constraint=models.CheckConstraint(check=models.Q(('max_participants__gte', 1)), name='max_participants_non_negative', violation_error_message='The maximum number of participants must be non-negative.'),
        ),
        migrations.AddConstraint(
            model_name='tournamentevent',
            constraint=models.UniqueConstraint(fields=('tournament', 'order', 'mat_or_location'), name='unique_tournament_event_order', violation_error_message='This order already exists.'),
        ),
        migrations.AddConstraint(
            model_name='tournamentevent',
            constraint=models.UniqueConstraint(fields=('tournament', 'event'), name='unique_tournament_event', violation_error_message='This event already exists.'),
        ),
        migrations.AddConstraint(
            model_name='registration',
            constraint=models.UniqueConstraint(fields=('tournament_event', 'registrant'), name='unique_registration', violation_error_message='This registrant is already registered for this event.'),
        ),
    ]
